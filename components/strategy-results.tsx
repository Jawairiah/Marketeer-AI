"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Download, Copy, Target, DollarSign, Calendar, Megaphone, Globe, MessageCircle } from "lucide-react"
import type { FormData } from "@/types/form-data"

interface StrategyResultsProps {
  strategy: any
  formData: FormData | null
  onReset: () => void
}

export function StrategyResults({ strategy, formData, onReset }: StrategyResultsProps) {
  const [language, setLanguage] = useState<"english" | "urdu">("english")
  const [copiedSection, setCopiedSection] = useState<string | null>(null)

  const copyToClipboard = async (text: string, section: string) => {
    try {
      await navigator.clipboard.writeText(text)
      setCopiedSection(section)
      setTimeout(() => setCopiedSection(null), 2000)
    } catch (err) {
      console.error("Failed to copy text: ", err)
    }
  }

  const downloadPDF = () => {
    // This would integrate with a PDF generation service
    console.log("Downloading PDF...")
  }

  const shareWhatsApp = () => {
    const message = `Check out my new marketing strategy generated by Marketeer AI! ðŸš€\n\nProduct: ${formData?.productDescription}\nBudget: PKR ${formData?.budgetAmount}/${formData?.budgetPeriod}\nGoal: ${formData?.campaignGoal}`
    const url = `https://wa.me/?text=${encodeURIComponent(message)}`
    window.open(url, "_blank")
  }

  return (
    <div className="space-y-6">
      {/* Header with Actions */}
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <div>
          <h2 className="text-3xl font-bold text-gray-800">Your Marketing Strategy</h2>
          <p className="text-gray-600 mt-1">Complete Meta Ads campaign plan for {formData?.productDescription}</p>
        </div>
        <div className="flex flex-wrap gap-2">
          <Button variant="outline" onClick={() => setLanguage(language === "english" ? "urdu" : "english")}>
            <Globe className="h-4 w-4 mr-2" />
            {language === "english" ? "Ø§Ø±Ø¯Ùˆ" : "English"}
          </Button>
          <Button variant="outline" onClick={shareWhatsApp}>
            <MessageCircle className="h-4 w-4 mr-2" />
            Share
          </Button>
          <Button variant="outline" onClick={downloadPDF}>
            <Download className="h-4 w-4 mr-2" />
            Download PDF
          </Button>
          <Button onClick={onReset}>Create New Strategy</Button>
        </div>
      </div>

      <Tabs defaultValue="funnel" className="w-full">
        <TabsList className="grid w-full grid-cols-6">
          <TabsTrigger value="funnel">Funnel</TabsTrigger>
          <TabsTrigger value="objectives">Objectives</TabsTrigger>
          <TabsTrigger value="formats">Ad Formats</TabsTrigger>
          <TabsTrigger value="copy">Ad Copy</TabsTrigger>
          <TabsTrigger value="budget">Budget</TabsTrigger>
          <TabsTrigger value="schedule">7-Day Plan</TabsTrigger>
        </TabsList>

        {/* Funnel Strategy */}
        <TabsContent value="funnel" className="space-y-4">
          <div className="grid md:grid-cols-3 gap-4">
            {strategy.funnelStrategy?.map((stage: any, index: number) => (
              <Card key={index}>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg">{stage.stage}</CardTitle>
                    <Badge variant={index === 0 ? "default" : index === 1 ? "secondary" : "outline"}>
                      {stage.phase}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-gray-600 mb-3">{stage.description}</p>
                  <div className="space-y-2">
                    <h4 className="font-medium text-sm">Key Actions:</h4>
                    <ul className="text-sm space-y-1">
                      {stage.actions?.map((action: string, i: number) => (
                        <li key={i} className="flex items-start gap-2">
                          <Target className="h-3 w-3 mt-1 text-blue-600 flex-shrink-0" />
                          {action}
                        </li>
                      ))}
                    </ul>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Campaign Objectives */}
        <TabsContent value="objectives" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Recommended Meta Campaign Objectives</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {strategy.campaignObjectives?.map((objective: any, index: number) => (
                  <div key={index} className="border rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <h3 className="font-semibold">{objective.stage}</h3>
                      <Badge>{objective.objective}</Badge>
                    </div>
                    <p className="text-sm text-gray-600 mb-2">{objective.description}</p>
                    <div className="text-sm">
                      <span className="font-medium">Expected Outcome: </span>
                      {objective.expectedOutcome}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Ad Formats */}
        <TabsContent value="formats" className="space-y-4">
          <div className="grid md:grid-cols-2 gap-4">
            <Card>
              <CardHeader>
                <CardTitle>Recommended Ad Formats</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {strategy.adFormats?.formats?.map((format: any, index: number) => (
                    <div key={index} className="flex items-center justify-between p-3 border rounded">
                      <div>
                        <h4 className="font-medium">{format.type}</h4>
                        <p className="text-sm text-gray-600">{format.description}</p>
                      </div>
                      <Badge variant="outline">{format.priority}</Badge>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Platform Recommendations</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {strategy.adFormats?.platforms?.map((platform: any, index: number) => (
                    <div key={index} className="flex items-center justify-between p-3 border rounded">
                      <div>
                        <h4 className="font-medium">{platform.name}</h4>
                        <p className="text-sm text-gray-600">{platform.reason}</p>
                      </div>
                      <Badge variant={platform.priority === "High" ? "default" : "secondary"}>
                        {platform.priority}
                      </Badge>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Ad Copy */}
        <TabsContent value="copy" className="space-y-4">
          {strategy.adCopy?.map((copy: any, index: number) => (
            <Card key={index}>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle>{copy.stage} Ad Copy</CardTitle>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() =>
                      copyToClipboard(
                        `${copy[language].headline}\n\n${copy[language].description}\n\nCTA: ${copy[language].cta}`,
                        `${copy.stage}-${language}`,
                      )
                    }
                  >
                    <Copy className="h-4 w-4 mr-2" />
                    {copiedSection === `${copy.stage}-${language}` ? "Copied!" : "Copy"}
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div>
                    <h4 className="font-medium mb-2">Headline:</h4>
                    <p className="p-3 bg-gray-50 rounded border-l-4 border-blue-500">{copy[language].headline}</p>
                  </div>
                  <div>
                    <h4 className="font-medium mb-2">Description:</h4>
                    <p className="p-3 bg-gray-50 rounded border-l-4 border-green-500">{copy[language].description}</p>
                  </div>
                  <div>
                    <h4 className="font-medium mb-2">Call to Action:</h4>
                    <p className="p-3 bg-gray-50 rounded border-l-4 border-purple-500">{copy[language].cta}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </TabsContent>

        {/* Budget Planner */}
        <TabsContent value="budget" className="space-y-4">
          <div className="grid md:grid-cols-2 gap-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <DollarSign className="h-5 w-5" />
                  Budget Breakdown
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {strategy.budgetPlan?.breakdown?.map((item: any, index: number) => (
                    <div key={index} className="flex justify-between items-center p-3 border rounded">
                      <div>
                        <h4 className="font-medium">{item.stage}</h4>
                        <p className="text-sm text-gray-600">{item.description}</p>
                      </div>
                      <div className="text-right">
                        <p className="font-semibold">PKR {item.amount}</p>
                        <p className="text-sm text-gray-600">{item.percentage}%</p>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Budget Summary</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="text-center p-4 bg-blue-50 rounded-lg">
                    <h3 className="text-2xl font-bold text-blue-600">PKR {strategy.budgetPlan?.total}</h3>
                    <p className="text-sm text-gray-600">Total {formData?.budgetPeriod} budget</p>
                  </div>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span>Weekly equivalent:</span>
                      <span className="font-medium">PKR {strategy.budgetPlan?.weekly}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Monthly equivalent:</span>
                      <span className="font-medium">PKR {strategy.budgetPlan?.monthly}</span>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* 7-Day Schedule */}
        <TabsContent value="schedule" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Calendar className="h-5 w-5" />
                7-Day Campaign Schedule
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {strategy.campaignSchedule?.map((day: any, index: number) => (
                  <div key={index} className="border rounded-lg p-4">
                    <div className="flex items-center justify-between mb-3">
                      <h3 className="font-semibold">
                        Day {day.day}: {day.focus}
                      </h3>
                      <Badge variant="outline">{day.stage}</Badge>
                    </div>
                    <div className="grid md:grid-cols-2 gap-4">
                      <div>
                        <h4 className="font-medium mb-2">Actions:</h4>
                        <ul className="text-sm space-y-1">
                          {day.actions?.map((action: string, i: number) => (
                            <li key={i} className="flex items-start gap-2">
                              <Megaphone className="h-3 w-3 mt-1 text-green-600 flex-shrink-0" />
                              {action}
                            </li>
                          ))}
                        </ul>
                      </div>
                      <div>
                        <h4 className="font-medium mb-2">Targeting:</h4>
                        <p className="text-sm text-gray-600">{day.targeting}</p>
                        {day.retargeting && (
                          <div className="mt-2">
                            <h4 className="font-medium mb-1">Retargeting:</h4>
                            <p className="text-sm text-gray-600">{day.retargeting}</p>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}
